// RF_IR_ML_0
// wireless IR range communication to Matlab

// Arduino attached to servo & IR range sensor, but not Matlab.
// connections:
// 3 Pin GP2Y0A21YK0F 10-80 cm IR Rangefinders:
// red -> 5V
// white -> A0
// black -> GND
// SERVO
// red -> 5V
// orange -> D5 (with pwm)
// black -> ground
// 100 uF capacitor across 5V and GND (optional?)

/*
 Copyright (C) 2011 J. Coliz <maniacbug@ymail.com>

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 version 2 as published by the Free Software Foundation.
 */

/**
 * Example for Getting Started with nRF24L01+ radios. 
 *
 * This is an example of how to use the RF24 class.  Write this sketch to two 
 * different nodes.  Put one of the nodes into 'transmit' mode by connecting 
 * with the serial monitor and sending a 'T'.  The ping node sends the current 
 * time to the pong node, which responds by sending the value back.  The ping 
 * node can then see how long the whole cycle took.
 */

#include <SPI.h>
#include "nRF24L01.h"
#include "RF24.h"
#include <Servo.h>
/*
 Copyright (C) 2011 J. Coliz <maniacbug@ymail.com>
 
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 version 2 as published by the Free Software Foundation.
 */
 
/**
 * @file printf.h
 *
 * Setup necessary to direct stdout to the Arduino Serial library, which
 * enables 'printf'
 */

#ifndef __PRINTF_H__
#define __PRINTF_H__

#ifdef ARDUINO

int serial_putc( char c, FILE * ) 
{
  Serial.write( c );

  return c;
} 

void printf_begin(void)
{
  fdevopen( &serial_putc, 0 );
}

#else
#error This example is only for use on Arduino.
#endif // ARDUINO

#endif // __PRINTF_H__

//
// Hardware configuration
//

// Set up nRF24L01 radio on SPI bus plus pins 9 & 10 

RF24 radio(9,10);

//
// Topology
//

// Radio pipe addresses for the 2 nodes to communicate.
const uint64_t pipes[2] = { 0xF0F0F0F0E1LL, 0xF0F0F0F0D2LL };

//
// Role management
//
// Set up role.  This sketch uses the same software for all the nodes
// in this system.  Doing so greatly simplifies testing.  
//

// The various roles supported by this sketch
typedef enum { role_ping_out = 1, role_pong_back } role_e;

// The debug-friendly names of those roles
const char* role_friendly_name[] = { "invalid", "Ping out", "Pong back"};

// The role of the current running sketch
role_e role = role_pong_back;

Servo myservo; //create myservo object to control servo

int distVal, num=5;
int servoPos=0, goalPos;
int radioval;

void setup(void)
{
  //
  // Print preamble
  //
  myservo.attach(5);         // servo attached in a particular pwm pin
  myservo.write(servoPos);   // servo is initially set to 90 degrees
  
  Serial.begin(57600);
  printf_begin();
  printf("\n\rRF24/examples/GettingStarted/\n\r");
  printf("ROLE: %s\n\r",role_friendly_name[role]);
  printf("*** PRESS 'T' to begin transmitting to the other node\n\r");

  //
  // Setup and configure rf radio
  //

  radio.begin();

  // optionally, increase the delay between retries & # of retries
  radio.setRetries(15,15);

  // optionally, reduce the payload size.  seems to
  // improve reliability
  //radio.setPayloadSize(8);

  //
  // Open pipes to other nodes for communication
  //

  // This simple sketch opens two pipes for these two nodes to communicate
  // back and forth.
  // Open 'our' pipe for writing
  // Open the 'other' pipe for reading, in position #1 (we can have up to 5 pipes open for reading)

  //if ( role == role_ping_out )
  
    radio.openWritingPipe(pipes[0]);
    radio.openReadingPipe(1,pipes[1]);
  
  //else
  
    //radio.openWritingPipe(pipes[1]);
    //radio.openReadingPipe(1,pipes[0]);
  

  //
  // Start listening
  //

  radio.startListening();

  //
  // Dump the configuration of the rf unit for debugging
  //

  radio.printDetails();
}

void loop(void)
{
  // measure IR range values at different angle values,
  // send angle info and IR range values wirelessly
  
  while ( ! radio.available())
  {
  }
  
  int goalPos;
  radio.read( &goalPos, sizeof(int) );
  printf("%d", goalPos, "\n\r");
  if (goalPos<0) goalPos = 0;      // protects form exceeding limits of the servo
  if(goalPos>180) goalPos = 180;
  
  radio.stopListening();
  if (servoPos < goalPos){
    while(servoPos < goalPos) {
      servoPos+=5;
      myservo.write(servoPos);
//      radio.stopListening();
                   
//      radio.startListening();
//      radio.stopListening();
      printf("Now sending %d...",servoPos);
      bool ok = radio.write( &servoPos, sizeof(int) );
      if (ok)
        printf("ok...");
      else
        printf("failed.\n\r");
            
      distVal = analogRead(0);
      printf("Now sending %d...",distVal);
      bool okay = radio.write( &distVal, sizeof(int) );
      if (okay)
        printf("okay...\n\r");
      else
        printf("failed.\n\r");  
        
//      radio.startListening();
            
    }
  }
  else if (servoPos > goalPos) {
    while(servoPos > goalPos) {
      servoPos-=5;
      myservo.write(servoPos);
//      radio.stopListening();
      printf("Now sending %d...",servoPos);
      bool ok = radio.write( &servoPos, sizeof(int) );
      if (ok)
        printf("ok...");
      else
        printf("failed.\n\r");
      
      distVal = analogRead(0);
      printf("Now sending %d...",distVal);
      bool okay = radio.write( &distVal, sizeof(int) );
      if (okay)
        printf("okay...\n\r");
      else
        printf("failed.\n\r");
    }
  }
  radio.startListening();
}

int averageDist(){
  int distValA = analogRead(0);
  delay(50);
  int distValB = analogRead(0);
  delay(50);
  int distValC = analogRead(0);
  delay(50);
  return (distValA+distValB+distValC)/3;
}
