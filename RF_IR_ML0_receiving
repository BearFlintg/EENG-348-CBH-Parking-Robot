// RF_IR_ML0_receiving
// connects with servo_IR_ML.m
/* connections:
this arduino is wired to the PC and on the same serial port as the Matlab program
servo_IR_ML.m

*/
/*
 Copyright (C) 2011 J. Coliz <maniacbug@ymail.com>

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 version 2 as published by the Free Software Foundation.
 */

/**
 * Example for Getting Started with nRF24L01+ radios. 
 *
 * This is an example of how to use the RF24 class.  Write this sketch to two 
 * different nodes.  Put one of the nodes into 'transmit' mode by connecting 
 * with the serial monitor and sending a 'T'.  The ping node sends the current 
 * time to the pong node, which responds by sending the value back.  The ping 
 * node can then see how long the whole cycle took.
 */

#include <SPI.h>
#include "nRF24L01.h"
#include "RF24.h"
/*
 Copyright (C) 2011 J. Coliz <maniacbug@ymail.com>
 
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 version 2 as published by the Free Software Foundation.
 */
 
/**
 * @file printf.h
 *
 * Setup necessary to direct stdout to the Arduino Serial library, which
 * enables 'printf'
 */

#ifndef __PRINTF_H__
#define __PRINTF_H__

#ifdef ARDUINO

int serial_putc( char c, FILE * ) 
{
  Serial.write( c );

  return c;
} 

void printf_begin(void)
{
  fdevopen( &serial_putc, 0 );
}

#else
#error This example is only for use on Arduino.
#endif // ARDUINO

#endif // __PRINTF_H__

//
// Hardware configuration
//

// Set up nRF24L01 radio on SPI bus plus pins 9 & 10 

RF24 radio(9,10);

//
// Topology
//

// Radio pipe addresses for the 2 nodes to communicate.
const uint64_t pipes[2] = { 0xF0F0F0F0E1LL, 0xF0F0F0F0D2LL };

//
// Role management
//
// Set up role.  This sketch uses the same software for all the nodes
// in this system.  Doing so greatly simplifies testing.  
//

// The various roles supported by this sketch
typedef enum { role_ping_out = 1, role_pong_back } role_e;

// The debug-friendly names of those roles
const char* role_friendly_name[] = { "invalid", "Ping out", "Pong back"};

// The role of the current running sketch
role_e role = role_pong_back;

int distVal, num=5;
int servoPos=0, goalPos;

void setup(void)
{
  //
  // Print preamble
  //

  Serial.begin(57600);
  printf_begin();
  printf("\n\rRF24/examples/GettingStarted/\n\r");
  printf("ROLE: %s\n\r",role_friendly_name[role]);
  printf("*** PRESS 'T' to begin transmitting to the other node\n\r");

  //
  // Setup and configure rf radio
  //

  radio.begin();

  // optionally, increase the delay between retries & # of retries
  radio.setRetries(15,15);

  // optionally, reduce the payload size.  seems to
  // improve reliability
  //radio.setPayloadSize(8);

  //
  // Open pipes to other nodes for communication
  //

  // This simple sketch opens two pipes for these two nodes to communicate
  // back and forth.
  // Open 'our' pipe for writing
  // Open the 'other' pipe for reading, in position #1 (we can have up to 5 pipes open for reading)

  //if ( role == role_ping_out )
  
    //radio.openWritingPipe(pipes[0]);
    //radio.openReadingPipe(1,pipes[1]);
  
  //else
  
    radio.openWritingPipe(pipes[1]);
    radio.openReadingPipe(1,pipes[0]);
  

  //
  // Start listening
  //

  radio.startListening();

  //
  // Dump the configuration of the rf unit for debugging
  //

  radio.printDetails();
}

void loop(void)
{
    //
  // receive goal angle from Matlab, transmit wirelessly.
 // Receive angle info and IR range values wirelessly,
  // and send them to Matlab
  

  radio.stopListening();
  
  // wait for ML
  while ( !(Serial.available() > 0)){ 
  }
  
    goalPos = Serial.parseInt();     // read goal angle value
    
    printf("Now sending %d...",goalPos);
      bool ok = radio.write( &goalPos, sizeof(int) );
      if (ok)
        Serial.println("ok...");
      else
        printf("failed.\n\r");
    
    radio.startListening();
    // if there is data ready
    
    if (servoPos < goalPos){
    while(servoPos < goalPos) {
      if ( radio.available() )
      {
      radio.read( &servoPos, sizeof(int) );
      while ( ! radio.available())
      {
      }
      radio.read( &distVal, sizeof(int) );
      
      Serial.println(servoPos);
      Serial.println(distVal);
      }
    }
  }
  else if (servoPos > goalPos) {
    while(servoPos > goalPos) {
      servoPos-=5;
      while ( ! radio.available())
      {
      }
      radio.read( &servoPos, sizeof(int) );
      Serial.println(servoPos);
      while ( ! radio.available())
      {
      }
      radio.read( &distVal, sizeof(int) );
      Serial.println(distVal);
    }
  }


      // Now, resume listening so we catch the next packets.
      radio.startListening();
}
